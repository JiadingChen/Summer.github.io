# 导入聚宽函数库
import jqdata
# 导入 Alpha_191 因子库
from jqlib.alpha191 import *

# 初始化函数，设定基准等等
def initialize(context):
    #设置回测分组
    quantile = 2
    # 设定中证800作为基准
    set_benchmark('000906.XSHG')
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    
    ### 股票相关设定 ###
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    
    ## 运行函数（reference_security为运行时间的参考标的；传入的标的只做种类区分，因此传入'000300.XSHG'或'510300.XSHG'是一样的）
      # 每月第一个交易日，开盘前运行
    #run_daily(before_market_open, time='9:30')
    run_monthly(before_market_open,monthday=1, time='9:30')
    #run_monthly(, monthday=1, time='before_open')
     # 每月第一个交易日，开盘时运行
    #run_daily(market_open, time='every_bar')
    run_monthly(market_open,monthday=1, time='9:30')
def mad(factor):
    # 3倍中位数去极值
    # 确定输入变量
    #factor = np.array(factor)
        
    # 求出因子值的中位数
    med = np.median(factor)

    # 求出因子值与中位数的差值，进行绝对值
    mad = np.median(abs(factor - med))

    # 定义几倍的中位数上下限
    high = med + (3 * 1.4826 * mad)
    low = med - (3 * 1.4826 * mad)

    # 替换上下限以外的值
    factor = np.where(factor > high, high, factor)
    factor = np.where(factor < low, low, factor)
    
    # 因为np处理后会将数据由[x]变为[[x]]的数据，所以进行处理
    ret = factor
    return ret


def stand(factor):
    #factor = np.array(factor)
    mean = factor.mean()
    std = factor.std()
    return (factor - mean)/std
    
## 开盘前运行函数     
def before_market_open(context):
    quantile = 4
    # 输出运行时间
    log.info('函数运行时间(before_market_open)：'+str(context.current_dt.time()))
    current_security = context.portfolio.positions.keys()
    # 获取前一个交易日的日期
    current_date =  context.previous_date
    # 获取中证800股票成分股的alpha因子值，剔除NaN值后按照因子值做降序排列
    alpha_stocks = alpha_002('000906.XSHG',current_date).dropna().sort_values(ascending=False)
    # 输出因子值最高的前5只股票代码及其因子值
    #log.info('\n',alpha_stocks.head(5))
    
    alpha_stocks = pd.DataFrame(alpha_stocks)
    alpha_stocks.reset_index(level=['code'], inplace=True)
    alpha_stocks.columns = ['Stock','Factor']
    alpha_stocks['Factor'] = mad(alpha_stocks['Factor'])
    alpha_stocks['Factor'] = stand(alpha_stocks['Factor'])
    alpha_stocks = alpha_stocks.set_index(['Stock'])
    alpha_stocks = alpha_stocks.iloc[:,0]
    
    if quantile == 1:
        alpha_select = alpha_stocks[(alpha_stocks <= alpha_stocks.quantile(0.2))]
    elif quantile == 2:
        alpha_select = alpha_stocks[(alpha_stocks > alpha_stocks.quantile(0.2)) & (alpha_stocks <= alpha_stocks.quantile(0.4))]
    elif quantile == 3:
        alpha_select = alpha_stocks[(alpha_stocks > alpha_stocks.quantile(0.4)) & (alpha_stocks <= alpha_stocks.quantile(0.6))]
    elif quantile == 4:
        alpha_select = alpha_stocks[(alpha_stocks > alpha_stocks.quantile(0.6)) & (alpha_stocks <= alpha_stocks.quantile(0.8))]
    else:
        alpha_select = alpha_stocks[(alpha_stocks > alpha_stocks.quantile(0.8))]


    log.info('\n',alpha_select)
    # 获取降序排序后的股票列表 
    #alpha_head = list(alpha_stocks.index)
    alpha_head = list(alpha_select.index)
    # 过滤停牌股票，并获取因子值最高的前5只股票代码
    #alpha_head = paused_filter(alpha_head)[:5]
    alpha_head = paused_filter(alpha_head)
    # 得到买入股票列表
    g.stocks_to_buy = list(set(alpha_head))
    # 得到卖出股票列表
    g.stocks_to_sell = list(set(current_security)-set(alpha_head))

## 开盘时运行函数
def market_open(context):
    # 卖出股票
    for stock in g.stocks_to_sell:
        order_target(stock,0)
        log.info("卖出 %s" % (stock))
    # 按照买入股票列表的股票数量平分买入资金
    try:
        g.cash = context.portfolio.available_cash/len(g.stocks_to_buy)
    except:
        g.cash = 0
    # 买入股票
    for stock in g.stocks_to_buy:
        order_value(stock, g.cash)
        log.info("买入 %s" % (stock))

## 过滤停牌股票,更多函数详见共享函数库：https://www.joinquant.com/algorithm/apishare/list
def paused_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].paused]
    # 返回结果
    return security_list
